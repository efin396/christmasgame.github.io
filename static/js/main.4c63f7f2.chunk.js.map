{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cellIndex","isOn","getSelections","react_default","a","createElement","className","onClick","Board","_useState","useState","_useState2","Object","slicedToArray","player","setPlayer","_useState3","grid","_useState4","board","setBoard","_useState5","_useState6","click","setClick","updatePlayer","_cellIndex$split","split","_cellIndex$split2","cellRowIndex","cellColIndex","parseInt","i","j","updateLastClick","TypeError","currSt","objectSpread","displayMoves","_cellIndex$split3","_cellIndex$split4","handleMove","_cellIndex$split5","_cellIndex$split6","bluePoint","redPoint","row","col","indexOf","console","log","checkPoints","hasWon","every","cell","includes","gridDisplay","map","rowIndex","key","colIndex","src_Cell","join","App","src_Board","isBlue","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4c63f7f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Cell.css';\r\n\r\nfunction Cell(props){\r\n    const { cellIndex, isOn, getSelections } = props;\r\n\r\n    function handleToggleLight() {\r\n        getSelections(cellIndex);\r\n        \r\n    }\r\n\r\n    return (\r\n        <button \r\n            className={isOn === \"r\"?\"Cell-r\":isOn === \"b\"? \"Cell-b\":isOn === \"s\"? \"options\": \"Cell-off\"} \r\n            onClick={handleToggleLight}\r\n        ></button>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React, { useState } from \"react\";\r\nimport './Board.css';\r\nimport Cell from \"./Cell\";\r\n\r\n\r\nfunction Board(props) {\r\n   // const { } = props;\r\n    //const lastClick = [-1,-1]\r\n    \r\n\r\n    //create size*size matrix state, randomly setting isOn to true/false\r\n    const startGrid = [\r\n        [\"r\",\"r\",\"r\",\"r\"],\r\n        [\"r\",\"+\",\"+\",\"r\"],\r\n        [\"b\",\"+\",\"+\",\"b\"],\r\n        [\"b\",\"b\",\"b\",\"b\"]\r\n    ]\r\n    const [player, setPlayer] = useState(true)\r\n    const [ board, setBoard ] = useState({ grid: startGrid });\r\n    const [ click, setClick ] = useState([0,0]);\r\n    const updateLastClick = (cellRowIndex,cellColIndex, click) => {\r\n        const newClick= [cellRowIndex,cellColIndex];\r\n        setClick(newClick);\r\n      }\r\n\r\n    const updatePlayer = (player) => {\r\n        const newPlayer= !player;\r\n        setPlayer(newPlayer);\r\n      }\r\n    /** toggleLight: toggles a single light on/off in the state */\r\n    const getSelections = function(cellIndex){\r\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\r\n        cellRowIndex = parseInt(cellRowIndex);\r\n        cellColIndex = parseInt(cellColIndex);\r\n        \r\n        for (let i=0; i < 4; i++){\r\n            for (let j=0; j < 4; j++){\r\n                if (board.grid[i][j] === \"s\"){\r\n                    board.grid[i][j] = \"+\"\r\n            }\r\n            }\r\n        }\r\n        updateLastClick(cellRowIndex,cellColIndex,click)\r\n        try{\r\n        if (board.grid[cellRowIndex+1][cellColIndex] === \"+\"){\r\n            board.grid[cellRowIndex+1][cellColIndex] = \"s\"\r\n        }\r\n        } catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex-1][cellColIndex] === \"+\"){\r\n            board.grid[cellRowIndex-1][cellColIndex] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex][cellColIndex-1] === \"+\"){\r\n            board.grid[cellRowIndex][cellColIndex-1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex][cellColIndex+1] === \"+\"){\r\n            board.grid[cellRowIndex][cellColIndex+1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex+1][cellColIndex+1] === \"+\"){\r\n            board.grid[cellRowIndex+1][cellColIndex+1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex+1][cellColIndex-1] === \"+\"){\r\n            board.grid[cellRowIndex+1][cellColIndex-1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex-1][cellColIndex+1] === \"+\"){\r\n            board.grid[cellRowIndex-1][cellColIndex+1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex-1][cellColIndex-1] === \"+\"){\r\n            board.grid[cellRowIndex-1][cellColIndex-1] = \"s\"\r\n        }} catch(TypeError){}\r\n        setBoard(currSt => (\r\n            {   ...currSt,\r\n                grid: currSt.grid\r\n            }\r\n        ))\r\n    }\r\n    /** displayMoves: either shows possible selections for moves or updates player move if applicable*/\r\n    function displayMoves(cellIndex){\r\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\r\n        cellRowIndex = parseInt(cellRowIndex);\r\n        cellColIndex = parseInt(cellColIndex);\r\n      \r\n        if ((board.grid[cellRowIndex][cellColIndex] === \"r\" && !player)|| (board.grid[cellRowIndex][cellColIndex] === \"b\" && player)){\r\n            getSelections(cellIndex);\r\n        }\r\n        else if ((board.grid[click[0]][click[1]] === \"b\" && player && board.grid[cellRowIndex][cellColIndex] === \"s\")){\r\n            handleMove(cellIndex)\r\n            updatePlayer(player)\r\n        }\r\n        else if ((board.grid[click[0]][click[1]] === \"r\" && !player && board.grid[cellRowIndex][cellColIndex] === \"s\")){\r\n            handleMove(cellIndex)\r\n            updatePlayer(player)\r\n        }\r\n\r\n\r\n       \r\n\r\n        }\r\n    function checkPoints(){\r\n        let bluePoint = ['+bbr', '+brb','+rbb', 'bbr+', 'brb+', '+rbb', 'rbb+']\r\n        let redPoint = ['+rrb', '+rbr','+brr', 'rrb+', 'rbr+', '+brr', 'brr+']\r\n        for (let i=0; i < 4; i++){\r\n            let row = board.grid[i][0]+board.grid[i][1]+board.grid[i][2]+board.grid[i][3]\r\n            let col = board.grid[0][i]+board.grid[1][i]+board.grid[2][i]+board.grid[3][i]\r\n            //console.log(row)\r\n            if (bluePoint.indexOf(row) !== -1){\r\n                console.log(row)\r\n                for (let j=0; j < 4; j++){\r\n                    if (board.grid[i][j] === \"r\"){\r\n                        board.grid[i][j] = \"+\"\r\n                    }\r\n                } \r\n            } \r\n            if (bluePoint.indexOf(col) !== -1){\r\n                for (let j=0; j < 4; j++){\r\n                    if (board.grid[j][i] === \"r\"){\r\n                        board.grid[j][i] = \"+\"\r\n                    }\r\n                } \r\n            } \r\n            if (redPoint.indexOf(row) !== -1){\r\n                console.log(row)\r\n                for (let j=0; j < 4; j++){\r\n                    if (board.grid[i][j] === \"b\"){\r\n                        board.grid[i][j] = \"+\"\r\n                    }\r\n                } \r\n            } \r\n            if (redPoint.indexOf(col) !== -1){\r\n                console.log(col)\r\n                for (let j=0; j < 4; j++){\r\n                    if (board.grid[j][i] === \"b\"){\r\n                        board.grid[j][i] = \"+\"\r\n                    }\r\n                } \r\n            } \r\n            }\r\n            setBoard(currSt => (\r\n                {   ...currSt,\r\n                    grid: currSt.grid\r\n                }\r\n            ))\r\n        }\r\n    \r\n    function handleMove(cellIndex){\r\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\r\n        cellRowIndex = parseInt(cellRowIndex);\r\n        cellColIndex = parseInt(cellColIndex);\r\n        // console.log(click)\r\n        board.grid[cellRowIndex][cellColIndex] = board.grid[click[0]][click[1]]\r\n        board.grid[click[0]][click[1]] = \"+\"\r\n       \r\n        for (let i=0; i < 4; i++){\r\n            for (let j=0; j < 4; j++){\r\n                if (board.grid[i][j] === \"s\"){\r\n                    board.grid[i][j] = \"+\"\r\n                }\r\n            }\r\n        }\r\n        checkPoints()\r\n        setBoard(currSt => (\r\n            {   ...currSt,\r\n                grid: currSt.grid\r\n            }\r\n        ))\r\n    }\r\n\r\n    /** hasWon: checks if any blue or red remain */\r\n    function hasWon() {\r\n        if (board.grid.every( row => row.every( cell => !cell.includes('b')) )){\r\n            return \"red\"\r\n        }\r\n        if (board.grid.every( row => row.every( cell => !cell.includes('r')) )){\r\n            return \"blue\"\r\n        }\r\n        return \r\n    }\r\n    \r\n    \r\n    const gridDisplay = board.grid.map( function (row, rowIndex) {\r\n            return (\r\n                <div className=\"Board-row\" key={rowIndex}>\r\n                    {row.map((col, colIndex) => (\r\n                        <Cell \r\n                            key={[rowIndex, colIndex].join(\"\")}\r\n                            cellIndex={[rowIndex, colIndex].join(\"\")} \r\n                            isOn={board.grid[rowIndex][colIndex]}\r\n                            getSelections={displayMoves}\r\n                         />\r\n                    ))}\r\n                </div>\r\n            );\r\n        });\r\n\r\n    return(\r\n        <div className=\"Board\">\r\n           {hasWon() === \"red\"? <div className=\"Board-hasWon\">Congratulations Red Won!</div> : hasWon() === \"blue\"? <div className=\"Board-hasWon\">Congratulations Blue Won!</div>: gridDisplay }\r\n        </div>\r\n    );\r\n\r\n    }\r\nexport default Board;","import React from \"react\";\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className='App-h1'><span className=\"App-blue\">Testing</span></h1>\n      <Board isBlue = {true} />\n      <h1 className='App-h1'><span className=\"App-blue\">Score Board</span></h1>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}