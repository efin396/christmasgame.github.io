{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cellIndex","isOn","getSelections","react_default","a","createElement","className","onClick","Board","_useState","useState","_useState2","Object","slicedToArray","player","setPlayer","_useState3","grid","_useState4","board","setBoard","_useState5","_useState6","click","setClick","updatePlayer","_cellIndex$split","split","_cellIndex$split2","cellRowIndex","cellColIndex","parseInt","i","j","updateLastClick","TypeError","currSt","objectSpread","displayMoves","_cellIndex$split3","_cellIndex$split4","handleMove","_cellIndex$split5","_cellIndex$split6","bluePoint","redPoint","row","col","indexOf","console","log","checkPoints","hasWon","every","cell","includes","gridDisplay","map","rowIndex","key","colIndex","src_Cell","join","App","src_Board","isBlue","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6e31f18e.chunk.js","sourcesContent":["import React from \"react\";\nimport './Cell.css';\n\nfunction Cell(props){\n    const { cellIndex, isOn, getSelections } = props;\n\n    function handleToggleLight() {\n        getSelections(cellIndex);\n        \n    }\n\n    return (\n        <button \n            className={isOn === \"r\"?\"Cell-r\":isOn === \"b\"? \"Cell-b\":isOn === \"s\"? \"options\": \"Cell-off\"} \n            onClick={handleToggleLight}\n        ></button>\n    );\n}\n\nexport default Cell;","import React, { useState } from \"react\";\nimport './Board.css';\nimport Cell from \"./Cell\";\n\n\nfunction Board(props) {\n   // const { } = props;\n    //const lastClick = [-1,-1]\n    \n\n    //create size*size matrix state, randomly setting isOn to true/false\n    const startGrid = [\n        [\"r\",\"r\",\"r\",\"r\"],\n        [\"r\",\"+\",\"+\",\"r\"],\n        [\"b\",\"+\",\"+\",\"b\"],\n        [\"b\",\"b\",\"b\",\"b\"]\n    ]\n    const [player, setPlayer] = useState(true)\n    const [ board, setBoard ] = useState({ grid: startGrid });\n    const [ click, setClick ] = useState([0,0]);\n    const updateLastClick = (cellRowIndex,cellColIndex, click) => {\n        const newClick= [cellRowIndex,cellColIndex];\n        setClick(newClick);\n      }\n\n    const updatePlayer = (player) => {\n        const newPlayer= !player;\n        setPlayer(newPlayer);\n      }\n    /** getSelections: shows potential moves for a given chip */\n    const getSelections = function(cellIndex){\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\n        cellRowIndex = parseInt(cellRowIndex);\n        cellColIndex = parseInt(cellColIndex);\n        \n        for (let i=0; i < 4; i++){\n            for (let j=0; j < 4; j++){\n                if (board.grid[i][j] === \"s\"){\n                    board.grid[i][j] = \"+\"\n            }\n            }\n        }\n        updateLastClick(cellRowIndex,cellColIndex,click)\n        try{\n        if (board.grid[cellRowIndex+1][cellColIndex] === \"+\"){\n            board.grid[cellRowIndex+1][cellColIndex] = \"s\"\n        }\n        } catch(TypeError){}\n        try{\n        if (board.grid[cellRowIndex-1][cellColIndex] === \"+\"){\n            board.grid[cellRowIndex-1][cellColIndex] = \"s\"\n        }} catch(TypeError){}\n        try{\n        if (board.grid[cellRowIndex][cellColIndex-1] === \"+\"){\n            board.grid[cellRowIndex][cellColIndex-1] = \"s\"\n        }} catch(TypeError){}\n        try{\n        if (board.grid[cellRowIndex][cellColIndex+1] === \"+\"){\n            board.grid[cellRowIndex][cellColIndex+1] = \"s\"\n        }} catch(TypeError){}\n        setBoard(currSt => (\n            {   ...currSt,\n                grid: currSt.grid\n            }\n        ))\n    }\n    /** displayMoves: either shows possible selections for moves or updates player move if applicable*/\n    function displayMoves(cellIndex){\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\n        cellRowIndex = parseInt(cellRowIndex);\n        cellColIndex = parseInt(cellColIndex);\n      \n        if ((board.grid[cellRowIndex][cellColIndex] === \"r\" && !player)|| (board.grid[cellRowIndex][cellColIndex] === \"b\" && player)){\n            getSelections(cellIndex);\n        }\n        else if ((board.grid[click[0]][click[1]] === \"b\" && player && board.grid[cellRowIndex][cellColIndex] === \"s\")){\n            handleMove(cellIndex)\n            updatePlayer(player)\n        }\n        else if ((board.grid[click[0]][click[1]] === \"r\" && !player && board.grid[cellRowIndex][cellColIndex] === \"s\")){\n            handleMove(cellIndex)\n            updatePlayer(player)\n        }\n\n\n       \n\n        }\n    function checkPoints(){\n        let bluePoint = ['+bbr','+rbb', 'bbr+', '+rbb', 'rbb+']\n        let redPoint = ['+rrb','+brr', 'rrb+', '+brr', 'brr+']\n        for (let i=0; i < 4; i++){\n            let row = board.grid[i][0]+board.grid[i][1]+board.grid[i][2]+board.grid[i][3]\n            let col = board.grid[0][i]+board.grid[1][i]+board.grid[2][i]+board.grid[3][i]\n            //console.log(row)\n            if (bluePoint.indexOf(row) !== -1){\n                console.log(row)\n                for (let j=0; j < 4; j++){\n                    if (board.grid[i][j] === \"r\"){\n                        board.grid[i][j] = \"+\"\n                    }\n                } \n            } \n            if (bluePoint.indexOf(col) !== -1){\n                for (let j=0; j < 4; j++){\n                    if (board.grid[j][i] === \"r\"){\n                        board.grid[j][i] = \"+\"\n                    }\n                } \n            } \n            if (redPoint.indexOf(row) !== -1){\n                console.log(row)\n                for (let j=0; j < 4; j++){\n                    if (board.grid[i][j] === \"b\"){\n                        board.grid[i][j] = \"+\"\n                    }\n                } \n            } \n            if (redPoint.indexOf(col) !== -1){\n                console.log(col)\n                for (let j=0; j < 4; j++){\n                    if (board.grid[j][i] === \"b\"){\n                        board.grid[j][i] = \"+\"\n                    }\n                } \n            } \n            }\n            setBoard(currSt => (\n                {   ...currSt,\n                    grid: currSt.grid\n                }\n            ))\n        }\n    \n    function handleMove(cellIndex){\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\n        cellRowIndex = parseInt(cellRowIndex);\n        cellColIndex = parseInt(cellColIndex);\n        // console.log(click)\n        board.grid[cellRowIndex][cellColIndex] = board.grid[click[0]][click[1]]\n        board.grid[click[0]][click[1]] = \"+\"\n       \n        for (let i=0; i < 4; i++){\n            for (let j=0; j < 4; j++){\n                if (board.grid[i][j] === \"s\"){\n                    board.grid[i][j] = \"+\"\n                }\n            }\n        }\n        checkPoints()\n        setBoard(currSt => (\n            {   ...currSt,\n                grid: currSt.grid\n            }\n        ))\n    }\n\n    /** hasWon: checks if any blue or red remain */\n    function hasWon() {\n        if (board.grid.every( row => row.every( cell => !cell.includes('b')) )){\n            return \"red\"\n        }\n        if (board.grid.every( row => row.every( cell => !cell.includes('r')) )){\n            return \"blue\"\n        }\n        return \n    }\n    \n    \n    const gridDisplay = board.grid.map( function (row, rowIndex) {\n            return (\n                \n                <div className=\"Board-row\" key={rowIndex}>\n                    {row.map((col, colIndex) => (\n                        <Cell \n                            key={[rowIndex, colIndex].join(\"\")}\n                            cellIndex={[rowIndex, colIndex].join(\"\")} \n                            isOn={board.grid[rowIndex][colIndex]}\n                            getSelections={displayMoves}\n                         />\n                    ))}\n                </div>\n                \n\n            );\n        });\n    \n\n    return(\n        <div className=\"Board\">\n           {hasWon() === \"red\"? <div className=\"Board-hasWon\">Congratulations Red Won!</div> : hasWon() === \"blue\"? <div className=\"Board-hasWon\">Congratulations Blue Won!</div>: gridDisplay }\n           <h1 className='App-h1'><span className=\"App-blue\">Score Board</span></h1>\n        </div>\n    );\n\n    }\nexport default Board;","import React from \"react\";\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className='App-h1'><span className=\"App-blue\">Testing</span></h1>\n      <Board isBlue = {true} />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}