{"version":3,"sources":["Cell.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","cellIndex","isOn","toggleLight","react_default","a","createElement","className","onClick","Board","_useState","useState","grid","_useState2","Object","slicedToArray","board","setBoard","_cellIndex$split","split","_cellIndex$split2","cellRowIndex","cellColIndex","parseInt","i","j","TypeError","currSt","objectSpread","displayMoves","_cellIndex$split3","_cellIndex$split4","gridDisplay","map","row","rowIndex","key","col","colIndex","src_Cell","join","every","cell","App","src_Board","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.e41ba245.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Cell.css';\r\n\r\nfunction Cell(props){\r\n    const { cellIndex, isOn, toggleLight } = props;\r\n\r\n    function handleToggleLight() {\r\n        toggleLight(cellIndex);\r\n        \r\n    }\r\n\r\n    return (\r\n        <button \r\n            className={isOn === \"b\"?\"Cell-b\":isOn === \"w\"? \"Cell-w\":isOn === \"s\"? \"options\": \"Cell-off\"} \r\n            onClick={handleToggleLight}\r\n        ></button>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React, { useState } from \"react\";\r\nimport './Board.css';\r\nimport Cell from \"./Cell\";\r\n\r\n\r\nfunction Board(props) {\r\n    //const { size, chanceLightStartsOn } = props;\r\n\r\n    // /** randomLight: returns random boolean */\r\n    // function randomLight(){\r\n    //     return Math.random() < chanceLightStartsOn;\r\n    // }\r\n\r\n    //create size*size matrix state, randomly setting isOn to true/false\r\n    const startGrid = [\r\n        [\"b\",\"b\",\"b\",\"b\"],\r\n        [\"b\",\"+\",\"+\",\"b\"],\r\n        [\"w\",\"+\",\"+\",\"w\"],\r\n        [\"w\",\"w\",\"w\",\"w\"]\r\n    ]\r\n\r\n    const [ board, setBoard ] = useState({ grid: startGrid });\r\n    \r\n\r\n    /** toggleLight: toggles a single light on/off in the state */\r\n    const toggleLight = function(cellIndex){\r\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\r\n        cellRowIndex = parseInt(cellRowIndex);\r\n        cellColIndex = parseInt(cellColIndex);\r\n        for (let i=0; i < 4; i++){\r\n            for (let j=0; j < 4; j++){\r\n                if (board.grid[i][j] === \"s\"){\r\n                    board.grid[i][j] = \"+\"\r\n            }\r\n            }\r\n        }\r\n        try{\r\n        if (board.grid[cellRowIndex+1][cellColIndex] === \"+\"){\r\n            board.grid[cellRowIndex+1][cellColIndex] = \"s\"\r\n        }\r\n        } catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex-1][cellColIndex] === \"+\"){\r\n            board.grid[cellRowIndex-1][cellColIndex] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex][cellColIndex-1] === \"+\"){\r\n            board.grid[cellRowIndex][cellColIndex-1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex][cellColIndex+1] === \"+\"){\r\n            board.grid[cellRowIndex][cellColIndex+1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex+1][cellColIndex+1] === \"+\"){\r\n            board.grid[cellRowIndex+1][cellColIndex+1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex+1][cellColIndex-1] === \"+\"){\r\n            board.grid[cellRowIndex+1][cellColIndex-1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex-1][cellColIndex+1] === \"+\"){\r\n            board.grid[cellRowIndex-1][cellColIndex+1] = \"s\"\r\n        }} catch(TypeError){}\r\n        try{\r\n        if (board.grid[cellRowIndex-1][cellColIndex-1] === \"+\"){\r\n            board.grid[cellRowIndex-1][cellColIndex-1] = \"s\"\r\n        }} catch(TypeError){}\r\n        setBoard(currSt => (\r\n            {   ...currSt,\r\n                grid: currSt.grid\r\n            }\r\n        ))\r\n    }\r\n\r\n    /** toggleAllLights: toggles clicked-on light and its neighbours */\r\n    function displayMoves(cellIndex){\r\n        let [ cellRowIndex, cellColIndex ] = cellIndex.split(\"\");\r\n        cellRowIndex = parseInt(cellRowIndex);\r\n        cellColIndex = parseInt(cellColIndex);\r\n        \r\n        if (board.grid[cellRowIndex][cellColIndex] === \"b\"|| board.grid[cellRowIndex][cellColIndex] === \"w\"){\r\n            toggleLight(cellIndex);                                 //toggle clicked on cell\r\n        }\r\n    }\r\n\r\n    /** hasWon: checks if all lights are off */\r\n    function hasWon() {\r\n        return board.grid.every( row => row.every( cell => !cell ) )\r\n    }\r\n    \r\n    \r\n    const gridDisplay = board.grid.map( function (row, rowIndex) {\r\n            return (\r\n                <div className=\"Board-row\" key={rowIndex}>\r\n                    {row.map((col, colIndex) => (\r\n                        <Cell \r\n                            key={[rowIndex, colIndex].join(\"\")}\r\n                            cellIndex={[rowIndex, colIndex].join(\"\")} \r\n                            isOn={board.grid[rowIndex][colIndex]}\r\n                            toggleLight={displayMoves}\r\n                         />\r\n                    ))}\r\n                </div>\r\n            );\r\n        });\r\n\r\n    return(\r\n        <div className=\"Board\">\r\n           {hasWon() ? <div className=\"Board-hasWon\">Congratulations!</div> : gridDisplay }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import React from \"react\";\nimport './App.css';\nimport Board from './Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className='App-h1'><span className=\"App-blue\">Testing</span></h1>\n      <Board/>\n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}